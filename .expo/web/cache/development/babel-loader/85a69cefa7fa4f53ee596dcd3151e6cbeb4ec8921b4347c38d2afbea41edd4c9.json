{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport React, { useState, useEffect } from 'react';\nimport { useRoute } from '@react-navigation/native';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { Audio } from 'expo-av';\nimport * as FileSystem from 'expo-file-system';\nimport { storage, db } from \"./firebase\";\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { doc, setDoc, updateDoc, getDoc } from 'firebase/firestore';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nRecordingScreen = function RecordingScreen() {\n  var route = useRoute();\n  var uid = route.params.uid;\n  var _React$useState = React.useState(),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    recording = _React$useState2[0],\n    setRecording = _React$useState2[1];\n  function startRecording() {\n    return _startRecording.apply(this, arguments);\n  }\n  function _startRecording() {\n    _startRecording = _asyncToGenerator(function* () {\n      try {\n        console.log('Requesting permissions..');\n        yield Audio.requestPermissionsAsync();\n        yield Audio.setAudioModeAsync({\n          allowsRecordingIOS: true,\n          playsInSilentModeIOS: true\n        });\n        console.log('Starting recording..');\n        var _yield$Audio$Recordin = yield Audio.Recording.createAsync(Audio.RecordingOptionsPresets.HIGH_QUALITY),\n          _recording = _yield$Audio$Recordin.recording;\n        setRecording(_recording);\n        console.log('Recording started');\n      } catch (err) {\n        console.error('Failed to start recording', err);\n      }\n    });\n    return _startRecording.apply(this, arguments);\n  }\n  function stopRecording() {\n    return _stopRecording.apply(this, arguments);\n  }\n  function _stopRecording() {\n    _stopRecording = _asyncToGenerator(function* () {\n      console.log('Stopping recording..');\n      setRecording(undefined);\n      yield recording.stopAndUnloadAsync();\n      yield Audio.setAudioModeAsync({\n        allowsRecordingIOS: false\n      });\n      var uri = recording.getURI();\n      console.log('Recording stopped and stored at', uri);\n      var response = yield fetch(uri);\n      var blob = yield response.blob();\n      var timestamp = new Date().getTime();\n      var filename = 'Audio' + timestamp + '.mp3';\n      var storageRef = ref(storage, filename);\n      yield uploadBytes(storageRef, blob);\n      console.log('Recording uploaded to Firebase Storage');\n      var downloadURL = yield getDownloadURL(storageRef);\n      var docRef = doc(db, 'recordings', uid);\n      var docSnapshot = yield getDoc(docRef);\n      if (docSnapshot.exists()) {\n        var previousData = docSnapshot.data();\n        var recordings = previousData.recordings || {};\n        var updatedRecordings = _objectSpread(_objectSpread({}, recordings), {}, _defineProperty({}, timestamp, {\n          downloadURL: downloadURL,\n          uid: uid\n        }));\n        yield updateDoc(docRef, {\n          recordings: updatedRecordings\n        });\n        console.log('New recording data appended to Firestore');\n      } else {\n        yield setDoc(docRef, {\n          recordings: _defineProperty({}, timestamp, {\n            downloadURL: downloadURL,\n            uid: uid\n          })\n        });\n        console.log('New document with recording data created in Firestore');\n      }\n    });\n    return _stopRecording.apply(this, arguments);\n  }\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: _jsx(Button, {\n      title: recording ? 'Stop Recording' : 'Start Recording',\n      onPress: recording ? stopRecording : startRecording\n    })\n  });\n};\nexport default RecordingScreen;","map":{"version":3,"names":["React","useState","useEffect","useRoute","Text","View","Button","Audio","FileSystem","storage","db","ref","uploadBytes","getDownloadURL","doc","setDoc","updateDoc","getDoc","jsx","_jsx","RecordingScreen","route","uid","params","_React$useState","_React$useState2","_slicedToArray","recording","setRecording","startRecording","_startRecording","apply","arguments","_asyncToGenerator","console","log","requestPermissionsAsync","setAudioModeAsync","allowsRecordingIOS","playsInSilentModeIOS","_yield$Audio$Recordin","Recording","createAsync","RecordingOptionsPresets","HIGH_QUALITY","err","error","stopRecording","_stopRecording","undefined","stopAndUnloadAsync","uri","getURI","response","fetch","blob","timestamp","Date","getTime","filename","storageRef","downloadURL","docRef","docSnapshot","exists","previousData","data","recordings","updatedRecordings","_objectSpread","_defineProperty","style","flex","justifyContent","alignItems","children","title","onPress"],"sources":["D:/Completed Projects/Autism/screens/Upload Audio.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useRoute } from '@react-navigation/native';\r\nimport { Text, View, Button } from 'react-native';\r\nimport { Audio } from 'expo-av';\r\nimport * as FileSystem from 'expo-file-system';\r\n\r\nimport { storage, db } from './firebase';\r\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\r\nimport { doc, setDoc, updateDoc, getDoc } from 'firebase/firestore';\r\n RecordingScreen = () => {\r\n  const route = useRoute();\r\n  const { uid } = route.params;\r\n\r\n  const [recording, setRecording] = React.useState();\r\n\r\n  async function startRecording() {\r\n    try {\r\n      console.log('Requesting permissions..');\r\n      await Audio.requestPermissionsAsync();\r\n      await Audio.setAudioModeAsync({\r\n        allowsRecordingIOS: true,\r\n        playsInSilentModeIOS: true,\r\n      });\r\n\r\n      console.log('Starting recording..');\r\n      const { recording } = await Audio.Recording.createAsync( Audio.RecordingOptionsPresets.HIGH_QUALITY\r\n      );\r\n      setRecording(recording);\r\n      console.log('Recording started');\r\n    } catch (err) {\r\n      console.error('Failed to start recording', err);\r\n    }\r\n  }\r\n\r\n   async function stopRecording() {\r\n     console.log('Stopping recording..');\r\n     setRecording(undefined);\r\n     await recording.stopAndUnloadAsync();\r\n     await Audio.setAudioModeAsync({\r\n       allowsRecordingIOS: false,\r\n     });\r\n     const uri = recording.getURI();\r\n     console.log('Recording stopped and stored at', uri);\r\n\r\n     // Upload the recorded audio file to Firebase Storage\r\n     const response = await fetch(uri);\r\n     const blob = await response.blob();\r\n\r\n     const timestamp = new Date().getTime(); // Generate a timestamp\r\n     const filename = 'Audio' + timestamp + '.mp3';\r\n\r\n\r\n\r\n     const storageRef = ref(storage, filename);\r\n     // Upload the audio file to Firebase Storage\r\n\r\n     await uploadBytes(storageRef, blob);\r\n     console.log('Recording uploaded to Firebase Storage');\r\n\r\n     // Get the download URL of the uploaded file\r\n     const downloadURL = await getDownloadURL(storageRef);\r\n\r\n     // Check if the document already exists in Firestor\r\n\r\n     // Check if the document already exists in Firestore\r\n     const docRef = doc(db, 'recordings', uid);\r\n     const docSnapshot = await getDoc(docRef);\r\n\r\n     if (docSnapshot.exists()) {\r\n       // If the document exists, update it by appending new data\r\n       const previousData = docSnapshot.data();\r\n       const recordings = previousData.recordings || {}; // Retrieve existing recordings or initialize empty object\r\n\r\n       // Merge the new recording with the existing recordings\r\n       const updatedRecordings = {\r\n         ...recordings,\r\n         [timestamp]: {\r\n           downloadURL: downloadURL,\r\n           uid: uid,\r\n         },\r\n       };\r\n\r\n       await updateDoc(docRef, {\r\n         recordings: updatedRecordings,\r\n       });\r\n       console.log('New recording data appended to Firestore');\r\n     } else {\r\n       // If the document does not exist, create a new document\r\n       await setDoc(docRef, {\r\n         recordings: {\r\n           [timestamp]: {\r\n             downloadURL: downloadURL,\r\n             uid: uid,\r\n           },\r\n         },\r\n       });\r\n       console.log('New document with recording data created in Firestore');\r\n     }\r\n    }\r\n  return (\r\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n      <Button\r\n        title={recording ? 'Stop Recording' : 'Start Recording'}\r\n        onPress={recording ? stopRecording : startRecording}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default RecordingScreen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}